/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();

app.use(bodyParser.json());

// Database
let todos = [
  {
    id: 123,
    title: 'todo1',
    description: 'todo1 description',
  },
];

// GET http://localhost:3000/todos

app.get('/todos', function (req, res) {
  fs.readFile('./todos.json', 'utf-8', (err, data) => {
    if (err) {
      console.log(err);
      return res.status(500).json({ msg: 'Internal Server Error' });
    }
    todos = JSON.parse(data);
    res.status(200).json({ todos });
  });
});

// GET http://localhost:3000/todos/123
app.get('/todos/:id', function (req, res) {
  fs.readFile('./todos.json', 'utf-8', (err, data) => {
    if (err) return res.status(500).json({ msg: 'Internal Server Error' });
    todos = JSON.parse(data);
    const id = req.params.id - 0;
    const todo = todos.find((todo) => todo.id === id);
    if (!todo) {
      return res.status(404).json({ msg: 'Todo not found' });
    }
    res.status(200).json({ todo });
  });
});

/*
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
*/

app.post('/todos', function (req, res) {
  const { title, completed, description } = req.body;
  if (!(title || completed || description)) {
    return res.status(400).json({ msg: 'invalid request body' });
  }
  const id = new Date().getTime();
  todos.push({ id, title, completed, description });
  fs.writeFile('./todos.json', JSON.stringify(todos), 'utf-8', (err) => {
    if (err) return res.status(500).json({ msg: 'Internal server error' });
  });
  res.status(201).json({ id });
});

/*
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
*/

app.put('/todos/:id', function (req, res) {
  fs.readFile('./todos.json', 'utf-8', (err, data) => {
    if (err) return res.status(500).json({ msg: 'Internal server error' });
    const id = req.params.id - 0;
    const { title, completed, description } = req.body;
    console.log(title, completed, description);
    todos = JSON.parse(data);
    const todo = todos.find((todo) => todo.id === id);
    if (!todo) return res.status(404).json({ msg: 'todo not found' });
    todos = todos.map((todo) => {
      if (todo.id === id) {
        console.log('in if', completed);
        todo.title = title ?? todo.title;
        todo.completed = completed ?? todo.completed;
        todo.description = description ?? todo.description;
      }
      return todo;
    });
// writting file 
    fs.writeFile('./todos.json', JSON.stringify(todos), 'utf-8', (err) => {
      if (err) return res.status(500).json({ msg: 'Internal server error' });
      return res.status(200).send();
    });
  });
});

app.listen(3000);

module.exports = app;
